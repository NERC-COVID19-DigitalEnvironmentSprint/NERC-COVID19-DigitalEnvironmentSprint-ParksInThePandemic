sp <- t(
as.matrix(
array(
data=outputs[, c("output1_sp", "output3_sp", "output5_sp")],
dimnames=list(param=c("sp1", "sp2", "sp3"), x.sd=seq(1,2,0.5))
)
)
)
# Put all prevelance values into a dataframe
pi <- t(
as.matrix(
array(
data=outputs[1, c("pi1", "pi3", "pi5")],
dimnames=list(param=c("pi"), x.sd=seq(1,2,0.5))
)
)
)
# Put all se precision values into a datafra
precision_se <- t(
as.matrix(
array(
data=outputs[, c("precision1_se", "precision3_se", "precision5_se")],
dimnames=list(param=c("se1", "se2", "se3"), x.sd=seq(1,2,0.5))
)
)
)
# Put all sp precision values into a datafra
precision_sp <- t(
as.matrix(
array(
data=outputs[, c("precision1_sp", "precision3_sp", "precision5_sp")],
dimnames=list(param=c("sp1", "sp2", "sp3"), x.sd=seq(1,2,0.5))
)
)
)
# Make a list of all the precisions
precisions <- c(rbind(melt(precision_se), melt(precision_sp))$value, rep(NA, 3))
# Melt predictions, rename columns, apend precisions
outputs <- rbind(melt(se), melt(sp), melt(pi))
colnames(outputs) <- c("x.sd", "param", "prediction")
outputs$precision <- precisions
outputs <- outputs[which(outputs$param!="pi"),]
# PLOT DATA
# Plot predicted values against times standard deviation
ggplot(outputs) + theme_classic()+
geom_point(aes(x=x.sd, y=prediction, col=param, group=param), size=3) +
geom_line(aes(x=x.sd, y=prediction, col=param, group=param),size=1)
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_y_continuous(trans = "reverse", breaks = unique(df$prediction))+
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_y_continuous(trans = "reverse", breaks = unique(outputs$prediction))+
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = "reverse", trans = "log10")
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = c("reverse", "log10"))
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = c("reverse"& "log10"))
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = "reverse", breaks = unique(outputs$precision))+
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = "reverse", breaks = unique(outputs$precision))
# Plot predicted values against precision
ggplot(outputs) + theme_classic() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_bw() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_bw() +
geom_bar(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_bw() +
geom_point(aes(x=precision, col=param, group=param),size=3) +
scale_x_continuous(trans = 'log10')
# Plot predicted values against precision
ggplot(outputs) + theme_bw() +
geom_point(aes(x=precision, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=precision, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
outputs
# Plot predicted values against precision
ggplot(outputs) + theme_bw() +
geom_point(aes(x=x.sd, y=prediction, col=param, group=param),size=3) +
geom_line(aes(x=x.sd, y=prediction, col=param, group=param),size=1) +
scale_x_continuous(trans = 'log10')
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
barplot()+
facet_grid(param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_bar()+
facet_grid(param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_bar()+
facet_grid(param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_bar()+
facet_grid(param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_bar()+
facet_grid(param~)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_bar()+
facet_grid(~param)
ggplot(outputs, aes(x=x.sd, col=param, group=param))+
geom_bar()+
facet_grid(~param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(param~)
outputs
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~param)
outputs$param[which(outputs$param == "se1" & "sp1")] <- "Stat-Pak"
outputs$param[which(outputs$param == se1 & sp1)] <- "Stat-Pak"
outputs$param[which(outputs$param == se1 & sp1)] <- outputs["Stat-Pak"]
outputs["Test"] <- outputs$param[which(outputs$param == se1 & sp1)] <- "Stat-Pak"
outputs
outputs$param[which(outputs$param == se1 | outputs$sp1), ]
outputs["Test"] <- outputs$param[which(outputs$param == "se1" | outputs$param == "sp1"), ] <- "Stat-Pak"
outputs$param[which(outputs$param == "se1" | outputs$param == "sp1"), ]
outputs
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), ]
outputs["Test"] <- outputs[which(outputs$param == "se1" | outputs$param == "sp1"), ] <- "Stat-Pak"
outputs["Test"] <- NA
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), ] <- "Stat-Pak"
ooutputs
outputs
outputs
# Make a list of all the precisions
precisions <- c(rbind(melt(precision_se), melt(precision_sp))$value, rep(NA, 3))
# Melt predictions, rename columns, apend precisions
outputs <- rbind(melt(se), melt(sp), melt(pi))
colnames(outputs) <- c("x.sd", "param", "prediction")
outputs$precision <- precisions
outputs <- outputs[which(outputs$param!="pi"),]
outputs["Test"] <- NA
outputs
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), "Test"]
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), "Test"] <- "Stat-Pak"
outputs
outputs["Test"] <- NA
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), "Test"] <- "Stat-Pak"
outputs[which(outputs$param == "se2" | outputs$param == "sp2"), "Test"] <- "IFN Gamma"
outputs[which(outputs$param == "se3" | outputs$param == "sp3"), "Test"] <- "Culture"
outputs
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(Test~param)
outputs["Parameter"] <- NA
grepl("se1", "se")
grepl("se", "se1")
lapply(outputs$param, grepl)
lapply(outputs$param, grep, pattern="se", value=TRUE, invert=TRUE)
lapply(outputs$param, grepl, pattern="se", value=TRUE, invert=TRUE)
lapply(outputs$param, grepl, pattern="se")
outputs["Parameter"] <- NA
outputs[which(lapply(outputs$param, grepl, pattern="se")), "Test"] <- "Sensitivity"
outputs[which(lapply(outputs$param, grepl, pattern="sp")), "Test"] <- "Specificity"
outputs[lapply(outputs$param, grepl, pattern="se"), "Test"] <- "Sensitivity"
outputs[lapply(outputs$param, grepl, pattern="sp"), "Test"] <- "Specificity"
lapply(outputs$param, grepl, pattern="se")
as.vector(lapply(outputs$param, grepl, pattern="se"))
unlist(lapply(outputs$param, grepl, pattern="se"))
outputs["Parameter"] <- NA
outputs[unlist(lapply(outputs$param, grepl, pattern="se")), "Test"] <- "Sensitivity"
outputs[unlist(lapply(outputs$param, grepl, pattern="sp")), "Test"] <- "Specificity"
outputs
outputs[unlist(lapply(outputs$param, grepl, pattern="se")), "Test"]
outputs["Test"] <- NA
outputs[which(outputs$param == "se1" | outputs$param == "sp1"), "Test"] <- "Stat-Pak"
outputs[which(outputs$param == "se2" | outputs$param == "sp2"), "Test"] <- "IFN Gamma"
outputs[which(outputs$param == "se3" | outputs$param == "sp3"), "Test"] <- "Culture"
outputs["Parameter"] <- NA
outputs[unlist(lapply(outputs$param, grepl, pattern="se")), "Parameter"] <- "Sensitivity"
outputs[unlist(lapply(outputs$param, grepl, pattern="sp")), "Parameter"] <- "Specificity"
outputs
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(Test~param)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(Test~Parameter)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(Test~)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~Parameter)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~Tests)
ggplot(outputs, aes(x=x.sd, y=prediction, col=param, group=param))+
geom_line()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
geom_line()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
geom_line()+
geom_point()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line()+
geom_point()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1.5)+
geom_point()+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1.2)+
geom_point(size=1.2)+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1.2)+
geom_point(size=1.5)+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=1.5)+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=0.25)
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,1,1.25)
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,1,1.25))
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,1,1.25))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_light()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_classic()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_dark()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
facet_grid(~Test)
ggplot(outputs, aes(x=x.sd, y=prediction, col=Parameter, group=Parameter))+
theme_bw()+
geom_line(size=1)+
geom_point(size=2)+
scale_y_continuous(breaks=c(0,0.25,0.5,0.75,1))+
scale_x_continuous(breaks=c(1,1.5,2))+
facet_grid(~Test)
library(sf)
library(ggplot2)
cases <- read.csv("C:/Users/anna-/OneDrive - University of Exeter/COVID-WeatherApp/cases.csv")
las <- st_read(dsn = "C:/Users/anna-/OneDrive - University of Exeter/COVID-WeatherApp/LA", layer = "Local_Authority_Districts__December_2017__Boundaries_in_Great_Britain")
ggplot(data = las) + geom_sf()
cases <- read.csv("C:/Users/anna-/OneDrive - University of Exeter/COVID-WeatherApp/cases.csv")
cases
install.packages(c("here", "leaflet.extras", "rgdal", "shinythemes"))
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
install.packages("dasjboardthemes")
install.packages("dashboardthemes")
install.packages(c("arm", "backports", "bayestestR", "BH", "broom", "callr", "car", "carData", "cli", "curl", "DBI", "dbplyr", "DescTools", "digest", "dplyr", "effectsize", "ellipse", "ellipsis", "emmeans", "fansi", "flexdashboard", "forcats", "fs", "GGally", "ggeffects", "ggfortify", "ggmcmc", "ggplot2", "ggpubr", "ggrepel", "ggridges", "gld", "glmmTMB", "glue", "gmp", "gtools", "haven", "hms", "htmlTable", "htmltools", "httpuv", "insight", "jsonlite", "knitr", "later", "lifecycle", "lme4", "lmerTest", "lubridate", "maptools", "matrixStats", "mcmcse", "mime", "modelr", "modeltools", "multcomp", "multcompView", "mvtnorm", "nloptr", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R2jags", "R6", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rjags", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "seewave", "selectr", "sf", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "stringi", "survey", "survival", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "vctrs", "WeMix", "withr", "xfun", "xml2", "yaml", "zoo"))
install.packages(c("ggplot2", "RColorBrewer", "reshape2", "rstudioapi", "shiny", "shinyBS", "shinydashboard", "shinyjs", "tippy", "yaml"))
install.packages(c("here", "htmltools", "htmlwidgets", "leaflet", "leaflet.extras", "rgdal", "shiny", "shinydashboard", "shinythemes", "tidyverse"))
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
install.packages("dashboardthemes")
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
library(devtools)
install_github("nik01010/dashboardthemes")
install.packages("devtools")
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
library(devtools)
install_github("nik01010/dashboardthemes")
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
install.packages(c("ggplot2", "RColorBrewer", "reshape2", "rstudioapi", "shiny", "shinyBS", "shinydashboard", "shinyjs", "tippy", "yaml"))
install.packages(c("ggplot2", "RColorBrewer", "reshape2", "rstudioapi", "shiny", "shinyBS", "shinydashboard", "shinyjs", "tippy", "yaml"))
install.packages(c("ggplot2", "RColorBrewer", "reshape2", "rstudioapi", "shiny", "shinyBS", "shinydashboard", "shinyjs", "tippy", "yaml"))
library(shiny); runApp('C:/Users/anna-/OneDrive - University of Exeter/parks tests/Test.R')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
file.exists("frfrf")
file.exists("data/google/GoogleMobilityReport.csv")
file.exists(here("data/google/GoogleMobilityReport.csv"))
here("data/google/GoogleMobilityReport.csv")
here()
here()
here("/Parks_and_pandemic/get_spatial_data.R")
here("/Parks_and_pandemic/get_spatial_data.R")
library(here)
here("/Parks_and_pandemic/get_spatial_data.R")
here()
here()
library(here)
here()
here('data/google/GoogleMobilityReport.csv')
file(here('data/google/GoogleMobilityReport.csv'))
file.exists(here('data/google/GoogleMobilityReport.csv'))
google <- read.csv(here('data/google/GoogleMobilityReport.csv'))
# Get google mobility data
if (file.exists('data/google/GoogleMobilityReport.csv')) {
google <- read.csv('data/google/GoogleMobilityReport.csv')
} else {
google <- read.googlemobility()
}
source(here("/Parks_and_pandemic/get_spatial_data.R"))
source(here("code/plot.googlemobilitydistricts.R"))
source(here("code/read.googlemobility.R"))
here("code/read.googlemobility.R")
here()
getwd()
# Import our functions
source(here("/Parks_and_pandemic/get_spatial_data.R"))
source(here("code/plot.googlemobilitydistricts.R"))
source(here("code/read.googlemobility.R"))
# Get google mobility data
if (file.exists('data/google/GoogleMobilityReport.csv')) {
google <- read.csv('data/google/GoogleMobilityReport.csv')
} else {
google <- read.googlemobility()
}
here()
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
here()
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
#install.packages('tibble')
library(tibble)
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
read.googlemobility()
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
read.csv('data/google/GoogleMobilityReport.csv')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
source(here("code/plot.googlemobilitydistricts.R"))
source(here("code/plot.googlemobilitydistricts.R"))
source(here("code/read.googlemobility.R"))
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
source(here("code/read.googlemobility.R"))
source(here("code/read.googlemobility.R"))
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
shiny::runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
if (file.exists("data/google/mobility_UK.csv")) {
google <- read.csv("data/google/mobility_UK.csv")
} else {
google <- read.googlemobility()
# google <- read.googlemobility("data/google/mobility_UK.csv")
}
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
mobilitydata <- readRDS("data/temporal/google_and_metoffice.csv")
mobilitydata <- read.csv("data/temporal/google_and_metoffice.csv")
mobilitydata <- read.csv("data/temporal/google_and_metoffice.csv")
mobilitydata <- read("data/temporal/google_and_metoffice.csv")
mobilitydata <- read.csv("data/temporal/google_and_metoffice.csv")
source("code/plot.googlemobilitydistricts.R")
setwd("C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic")
google
file.exists("data/temporal/google_and_metoffice.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("flexdashboard")
runApp()
runApp()
runApp()
View(plot.googlemobilitydistricts)
View(plot.googlemobilitydistricts)
runApp()
install.packages(c("conflicted", "osfr"))
shiny::runApp()
runApp()
rlang::last_error()
runApp()
setwd("C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic")
runApp()
runApp()
runApp()
rlang::last_error()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/anna-/OneDrive - University of Exeter/Diag_App/Simuland')
runApp('C:/Users/anna-/OneDrive - University of Exeter/parksinthepandemic')
runApp()
